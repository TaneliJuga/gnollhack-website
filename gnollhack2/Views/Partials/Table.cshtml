@inherits Umbraco.Web.Mvc.UmbracoViewPage<IPublishedContent>
@using Umbraco.Core.Models.PublishedContent
@using Umbraco.Web

@{
    String caption = (String)ViewData["caption"];
    IHtmlString description = (IHtmlString)ViewData["description"];
    IEnumerable<String> headers = (IEnumerable<String>)ViewData["headers"];
    IEnumerable<IEnumerable<String>> content = (IEnumerable<IEnumerable<String>>)ViewData["content"];
    int i = 0;
}

<button type="button" class="btn btn-info" data-toggle="collapse" data-target="#content">Simple collapsible</button>
<input type="text" id="myInput" onkeyup="myFunction()" placeholder="Search for properties.." title="Type in the name of a properties">
<div class="asd">
    <div id="borderimg">
        <div id="content" class="collapse">
            <h1>@caption</h1>
            <table class="table table-hover" id="myTable">
                <caption id="caption">@description.ToString()</caption>
                <thead>
                    <tr>
                        @foreach (var header in headers)
                        {
                            <th scope="col" onclick="sortTable(@i)">@header</th>
                            i++;
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in content)
                    {
                        <tr>
                            @Html.Raw("<th scope=\"row\">" + @item.First() + "</th>")

                            @foreach (var value in item.Skip(1))
                            {
                                @Html.Raw("<td>" + @value + "</td>")
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        // Open the scroll
        $('#content').collapse();
    })
</script>

<script>
    function sortTable(n) {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        table = document.getElementById("myTable");
        switching = true;
        // Set the sorting direction to ascending:
        dir = "asc";
        /* Make a loop that will continue until
        no switching has been done: */
        while (switching) {
            // Start by saying: no switching is done:
            switching = false;
            rows = table.rows;
            /* Loop through all table rows (except the
            first, which contains table headers): */
            for (i = 1; i < (rows.length - 1); i++) {
                // Start by saying there should be no switching:
                shouldSwitch = false;
                /* Get the two elements you want to compare,
                one from current row and one from the next: */
                //console.log("rows[i].children[n].innerHTML " + rows[i].children[n].innerHTML);
                x = rows[i].children[n];
                y = rows[i + 1].children[n];

                /* Check if the two rows should switch place,
                based on the direction, asc or desc: */
                if (dir == "asc") {
                    if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        console.log("break");
                        break;
                    }
                } else if (dir == "desc") {
                    if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        console.log("break");
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                /* If a switch has been marked, make the switch
                and mark that a switch has been done: */
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                // Each time a switch is done, increase this count by 1:
                switchcount++;
            } else {
                /* If no switching has been done AND the direction is "asc",
                set the direction to "desc" and run the while loop again. */
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        }
    }
</script>

<script>
    function myFunction() {
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("myInput");
        filter = input.value.toUpperCase();
        table = document.getElementById("myTable");
        tr = table.getElementsByTagName("tr");
        for (i = 1; i < tr.length; i++) {
            td = tr[i].children[0];
            if (td) {
                txtValue = td.textContent || td.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        }
    }
</script>