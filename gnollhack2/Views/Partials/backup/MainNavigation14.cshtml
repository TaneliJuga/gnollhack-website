@inherits Umbraco.Web.Mvc.UmbracoViewPage
@using Umbraco.Core;
@using Umbraco.Core.Models;
@using Umbraco.Core.Services;
@using ContentModels = Umbraco.Web.PublishedModels;
@{
    //ContentModels.LandingPage.ModelTypeAlias
    HashSet<string> modelContentTypes = ContentModels.ItemCollection3.GetModelContentType().CompositionAliases;
    var ancestors = Model.Ancestors();
    //var home = ancestors.GetEnumerator.Current();
    var home = Model.Root();
    IContentTypeService contentTypeService = Services.ContentTypeService;
    var objectCollectionChildTypes = contentTypeService.GetChildren(1469);
    IContentType alias = contentTypeService.Get(1469);
    ViewBag.objectCollectionChildTypes = (from type in objectCollectionChildTypes select type.Id);
    if (!home.IsDocumentType("LandingPage"))
    {
        home = home.Children.First();
    }
    var builder = new TagBuilder("textarea");
}


@if (home.Descendants().Any())
{
    IEnumerable<IPublishedContent> allChildren = home.Children;
    IEnumerable<IPublishedContent> children = allChildren.Where(c => Model.Value<bool>("hideFromNavigation") == false);
    @*<div class="debug">@ChildPages2(children.ToArray())</div>*@
    <nav class="navbar navbar-inverse navbar-fixed-top container">
        <div class="navbar-background">
            <div class="navbar-header">
                <a class="navbar-brand" href="@home.Url">
                    Home
                    <img alt="Home" src="/media/myflkvuz/gnollhack-icon-v2-512.png" />
                </a>

                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
            </div>
            <div id="navbar" class="collapse navbar-collapse navbar-centered">
                <div class="nav navbar-nav">
                    @*@HttpWriter
                        @section navbarScrolls{

                        }*@
                    @foreach (IPublishedContent childPage in children)
                    {
                        <div class="dropdown-border">
                            @if (childPage.Children.Any() && childPage.IsDocumentType("LandingPage"))
                            {
                                <div class="dropdown-button">
                                    <a href="#" class="toggle @(childPage.IsAncestorOrSelf(Model) ? "selected" : null)" role="button" aria-haspopup="true" aria-expanded="false">@childPage.Name<span class="caret"></span></a>
                                </div>
                                <div class="menu@(childPage.IsAncestorOrSelf(Model) ? " selected" : "")">
                                    @ChildPages(childPage.Children.ToArray(), childPage.Name)
                                </div>
                            }
                            else
                            {
                                <div>
                                    <a class="@(childPage.IsAncestorOrSelf(Model) ? "selected" : null)" href="@childPage.Url">@childPage.Name</a>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div><!--/.nav-collapse -->
        </div>
    </nav>

    <script>
        function findMenu(element) {
            var index = getMenuIndex(element);
            return element.parent().siblings(".menu").slice(index, (index + 1));
        }

        function getMenuIndex(dropdownButton) {
            return dropdownButton.parent().prevAll(".dropdown-button").length;
        }

        function toggleOpen(element) {
            var menu = findMenu(element);
            closeAllChildMenus(menu);
            element.parent().siblings('.menu').not(menu).slideUp("fast").removeClass("open");
            element.parent().siblings('.dropdown-button').children("a").children("span").removeClass("caret-up");
            menu.slideToggle("fast").toggleClass("open");
            element.children("span").toggleClass("caret-up");
        }

        function closeAllChildMenus(menu) {
            var openMenus = menu.children('.menu.open');
            if (openMenus.length > 0) {
                openMenus.each(function () {
                    closeAllChildMenus($(this));
                    $(this).slideUp().removeClass("open");
                });
            }
            menu.children('.dropdown-button').children("a").children("span").removeClass("caret-up").each(function () {
                console.log("remove caret-up " + $(this).parent().text());
            });
        }

        var toggle = true;
        $(document).ready(function () {
            var root = $('.dropdown-border > .dropdown-button > .toggle');
            console.log("root.text ", root.text());

            $('.toggle').not(root).on("click", function (e) {
                toggleOpen($(this));
                e.stopPropagation();
                e.preventDefault();
            });

            $(root).on("click", function (e) {
                console.log("root click");
                element = $(this);
                var menu = findMenu(element);
                closeAllChildMenus(menu);
                element.parent().siblings('.menu').not(menu).slideUp("fast").removeClass("open");
                element.parent().siblings('.dropdown-button').children("a").children("span").removeClass("caret-up");
                var border = $(this).parent().parent();
                //console.log("border.attr() " + border.attr());
                if (border.hasClass("open")) {
                    menu.slideToggle("fast", function () { $(this).add(border).toggleClass("open") });
                } else {
                    menu.slideToggle("fast").add(border).toggleClass("open");
                }

                element.children("span").toggleClass("caret-up");
                e.stopPropagation();
                e.preventDefault();
            });
        });
    </script>
}

@helper ChildPages(IPublishedContent[] selection, string headerText)
{
    @* Ensure that we have a collection of pages *@
    if (selection.Length > 0)
    {
        @* Get the first page in pages and get the level *@
        var naviLevel = selection[0].Level;

        <div class="divider"></div>
        <div class="dropdown-header">@headerText</div>
        @* Add in level for a CSS hook *@
        @*<ul class="dropdown-menu centered-menu">*@
        foreach (var item in selection)
        {
            var children = item.Children.Where(x => x.IsVisible()).ToArray();
            IEnumerable<int> objectCollectionChildTypes = ViewBag.objectCollectionChildTypes;
            if (children.Length > 0)
            {
                if (objectCollectionChildTypes.Contains(item.ContentType.Id))
                {
                    <div><a href="@item.Url">@item.Name</a></div>
                }
                else
                {
                    <div class="dropdown-button"><a href="#" class="toggle" role="button" aria-haspopup="true" aria-expanded="false">@item.Name <span class="caret"></span></a></div>
                }
            }
            else
            {
                <div><a href="@item.Url">@item.Name</a></div>
            }
        }
        foreach (var item in selection)
        {
            var children = item.Children.Where(x => x.IsVisible()).ToArray();
            IEnumerable<int> objectCollectionChildTypes = ViewBag.objectCollectionChildTypes;
            if (children.Length > 0)
            {
                if (!objectCollectionChildTypes.Contains(item.ContentType.Id))
                {
                    <div class="menu">
                        @ChildPages(children, item.Name)
                    </div>
                }
            }
        }
    }
}

@helper ChildPages2(IPublishedContent[] selection)
{
    foreach (var item in selection)
    {
        
        var children = item.Children.Where(x => x.IsVisible()).ToArray();

<div>
    _______________________________
    @item.Name ,
    IsDocumentType: @item.IsDocumentType("LandingPage"); , 
    IsComposedOf: @item.IsComposedOf("LandingPage"); , 
    @foreach (string alias in item.ContentType.CompositionAliases)
    {
        <div>alias: @alias</div>
    }
    @ChildPages2(children)
</div>

    }
}

@*@helper ChildPages3(HashSet<string> types, IPublishedContent[] selection)
    {
        foreach (var item in selection)
        {
            foreach (string alias in types)
            {
                <div>
                    _______________________________
                    @item.Name
                    IsComposedOf: @item.IsDocumentType("LandingPage");
                    IsComposedOf: @item.IsComposedOf("LandingPage");
                    @ChildPages2(children)
                </div>

            }
            var children = item.Children.Where(x => x.IsVisible()).ToArray();
            @ChildPages3(types, children)
        }
    }*@

@helper ChildPages3(HashSet<string> types)
{
    <div>ChildPages3</div>
    foreach (string alias in types)
    {
        <div>alias: @alias</div>
    }
}