@inherits Umbraco.Web.Mvc.UmbracoViewPage
@using Umbraco.Core;
@using Umbraco.Core.Models;
@using Umbraco.Core.Services;
@{
    var ancestors = Model.Ancestors();
    //var home = ancestors.GetEnumerator.Current();
    var home = Model.Root();
    IContentTypeService contentTypeService = Services.ContentTypeService;
    var objectCollectionChildTypes = contentTypeService.GetChildren(1469);
    ViewBag.objectCollectionChildTypes = (from type in objectCollectionChildTypes select type.Id);
    if (!home.IsDocumentType("LandingPage"))
    {
        home = home.Children.First();
    }
    IEnumerable<int> objectCollectionChildTypes2 = ViewBag.objectCollectionChildTypes;
}

@if (home.Descendants().Any())
{
    <div class="debug">
        @foreach (var child in objectCollectionChildTypes2)
        {
        <div>
            child: @child
        </div>
        }
    </div>
    IEnumerable<IPublishedContent> allChildren = home.Children;
    IEnumerable<IPublishedContent> children = allChildren.Where(c => Model.Value<bool>("hideFromNavigation") == false);

    <nav class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <a class="navbar-brand" href="@home.Url">
                    <img alt="Hyv&auml;n mielen pelit" src="~/svg/logo2_white.svg" style="margin-top:9px;height:40px;" />
                </a>

                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
            </div>
            <div id="navbar" class="collapse navbar-collapse navbar-centered">
                <ul class="nav navbar-nav">
                    @foreach (IPublishedContent childPage in children)
                    {
                        if (childPage.Children.Any())
                        {
                            if (childPage.IsDocumentType("LandingPage"))
                            {
                                <li class="dropdown@(childPage.IsAncestorOrSelf(Model) ? " selected" : "")">
                                    <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">@childPage.Name<span class="caret"></span></a>
                                    @ChildPages(childPage.Children.ToArray())
                                </li>

                            }
                            else
                            {
                                <li class="@(childPage.IsAncestorOrSelf(Model) ? "selected" : null)">
                                    <a href="@childPage.Url">@childPage.Name</a>
                                </li>
                            }

                        }
                        else
                        {
                            <li class="@(childPage.IsAncestorOrSelf(Model) ? "selected" : null)">
                                <a href="@childPage.Url">@childPage.Name</a>
                            </li>
                        }
                    }
                </ul>
            </div><!--/.nav-collapse -->
        </div>
    </nav>
}

@helper ChildPages(IPublishedContent[] selection)
{
    @* Ensure that we have a collection of pages *@
    if (selection.Length > 0)
    {
        @* Get the first page in pages and get the level *@
        var naviLevel = selection[0].Level;

        @* Add in level for a CSS hook *@
        <ul class="dropdown-menu centered-menu">
            @foreach (var item in selection)
            {
                <li>
                    @* if the page has any children, where the property umbracoNaviHide is not True *@
                    @{
                        var children = item.Children.Where(x => x.IsVisible()).ToArray();
                        IEnumerable<int> objectCollectionChildTypes = ViewBag.objectCollectionChildTypes;
                    }
                    @if (!objectCollectionChildTypes.Contains(item.ContentType.Id))
                    {
                    <a href="@item.Url">@item.Name contains: @objectCollectionChildTypes.Contains(item.ContentType.Id) id: @item.ContentType.Id</a>
                    }
                    else
                    {
                        if (children.Length > 0)
                        {
                            @* Recurse and call our helper to display the children *@
                            <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">@item.Name <span class="caret"></span></a>
                            @ChildPages(children)
                        }
                        else
                        {
                            <a href="@item.Url">@item.Name</a>
                        }
                    }
                </li>
            }
        </ul>
    }
}
